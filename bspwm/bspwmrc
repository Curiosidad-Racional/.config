#!/bin/sh
kill_wait_pids () {
    kill $* 2>/dev/null && (
        local I=20
        while kill -0 $* 2>/dev/null && [ $((I=I-1)) -gt 0 ]; do sleep 0.1; done
        [ $((I=I-1)) -gt 0 ] || kill -9 $*
    )
}
kill_wait () {
    local PIDS=$(pgrep -d' ' -x $1) && kill_wait_pids $PIDS
}
run_once () {
    pgrep -x $1 >/dev/null 2>&1 || nohup setsid $1 >/dev/null 2>&1 0<&- &
}

run_once nm-applet
run_once pasystray

kill_wait dunst
nohup setsid dunst -history_length 100 -history_key "mod4+shift+minus" \
         -lto 10s -nto 15 -cto 20 -show_age_threshold 1m -idle_threshold 10m \
         -format "%a: %s %n\n%b" >/dev/null 2>&1 0<&- &


KEYS_FIFO="$HOME/.config/polybar/keys.fifo"
[ -p "$KEYS_FIFO"] || mkfifo "$KEYS_FIFO"

ps --no-headers -C watch -o pid,args | sed -n '/watch -x -n0 sxhkd/{s| watch.*||;p}' | tr -s '\n' ' ' | xargs -r kill
kill_wait sxhkd
nohup setsid watch -x -n0 sxhkd -s "$KEYS_FIFO" >/dev/null 2>&1 0<&- &

xrandr-monitors && (feh --bg-scale --randomize ~/Pictures/backgrounds/* &);\
    Ms=$(bspc query -M) && [ $(echo "$Ms"|wc -l) -eq 1 ] && bspc monitor -d 1 2 3 4 5 || (I=0; for M in $(echo "$Ms"|tr '\n' ' '); do bspc monitor $M -d $((I=I+1)) $((I=I+1)) $((I=I+1)); done) &
    # MONITORS=($(xrandr | sed -n 's/^\([^ ]*\) connected [^+]*+\([0-9]*\).*/\2 \1/p' | sort -n | cut -d' ' -f2));\
    # if [ "${#MONITORS[@]}" -eq 1 ]; then bspc monitor -d 1 2 3 4 5; else IDX=0; for MONITOR in "${MONITORS[@]}";\
    # do bspc monitor $MONITOR -d $((IDX=IDX+1)) $((IDX=IDX+1)) $((IDX=IDX+1)); done; fi &

bspc config normal_border_color    "#4c566a"
bspc config active_border_color    "#1e1e1e"
bspc config focused_border_color   "#bc81ac"
bspc config presel_feedback_color  "#5e81ac"
bspc config urgent_border_color    "#dd2727"
bspc config border_width           2
bspc config window_gap             7
bspc config top_padding            0

bspc config split_ratio            0.52
bspc config borderless_monocle     true
bspc config gapless_monocle        true
bspc config pointer_follows_focus  false
bspc config focus_follows_pointer  false

bspc rule -a Audacious monitor=primary state=floating sticky=on
# bspc rule -a Gimp desktop='^8' state=floating follow=on
# bspc rule -a Chromium desktop='^2'
# bspc rule -a mplayer2 state=floating
# bspc rule -a Kupfer.py focus=on
# bspc rule -a Screenkey manage=off

kill_wait keynav
keynav "loadconfig ~/.config/keynav/keynavrc"
xsetroot -cursor_name tcross

ps --no-headers -C sh -o pid,args | sed -n '/polybar\/custom-keys.sh/{s| /.*||;p}' | tr -s '\n' ' ' | xargs -r kill
kill_wait polybar
export POLYBAR_BATTERY=$(basename "$(ls -d /sys/class/power_supply/BAT*)")
export POLYBAR_USB_DRIVE=/media/$USER/U3
export POLYBAR_TEMPERATURE="$(ls -d /sys/devices/platform/coretemp.0/hwmon/hwmon*)/temp1_input"
IP_DEVICE_LIST="$(ip -o -br link show  | cut -d' ' -f1)"
export POLYBAR_WLAN="$(echo "$IP_DEVICE_LIST" | grep wlp)"
export POLYBAR_ETH="$(echo "$IP_DEVICE_LIST" | grep enp)"
nohup setsid polybar bspwm >/dev/null 2>&1 0<&- &

kill_wait bspc
LAST=emacs
__remap () {
    if [ "$1" != "$LAST" ]
    then
        if [ emacs != "$LAST" ]
        then
            PIDs="$(ps --no-headers -C sxhkd -o pid,args | sed -n '/sxhkdrc-/{s/ sxhkd.*$//;p}' | tr -s '\n' ' ')"
            if [ -n "$PIDs" ]
            then
                kill_wait_pids $PIDs
            fi
            [ remap != "$LAST" ] || (xte 'keyup Shift_L' && echo "MODE:" > "$KEYS_FIFO")
        fi
        LAST="$1"
        [ -f "$HOME/.config/sxhkd/sxhkdrc-$1" ] && nohup setsid sxhkd -c "$HOME/.config/sxhkd/sxhkdrc-$1" >/dev/null 2>&1 0<&- &
        echo "TITLE:$2" > "$KEYS_FIFO"
    fi
}
__process_id () {
    case $(xprop -notype -id "$1" WM_CLASS | cut -d'"' -f4) in
    Emacs|Emacs-*|"")
        __remap emacs
        ;;
    Alacritty|st-256color|URxvt|XTerm|Terminator)
        __remap term TERM
        ;;
    *)
        __remap remap REMAP
        ;;
    esac
}
ID="$(bspc query -N -n focused)"
if [ -n "$ID" ]
then
    __process_id "$ID"
else
    __remap void VOID
fi
nohup setsid bspc subscribe node_focus node_remove desktop_focus | while read LINE
do
    case "${LINE%% *}" in
    node_focus)
        __process_id "${LINE##* }"
        ;;
    node_remove|desktop_focus)
        if [ -z "$(bspc query -N -n focused)" ]
        then
            __remap void VOID
        fi
        ;;
    esac
done &
